[pause_resume]
#recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.
[display_status]

[respond]

# Enable object exclusion
[exclude_object]

# See docs/Config_Reference.md for a description of parameters.
[idle_timeout]
gcode:
	{% if printer.pause_resume.is_paused %}
		M104 S0 ;Turn-off hotend
	{% else %}
		M84 XYZE
		TURN_OFF_HEATERS
	{% endif %}
timeout: 600

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(190)|float %}
    CLEAR_PAUSE
    M220 S100 # reset feedrate
    G21 # metric values
    G90 # absolute positioning
    M83  # extruder relative mode
    G28 X Y # home XY
    # Start bed heating
    M140 S{BED}
    # Wait for bed to reach temperature
    M190 S{BED}
    # Set and wait for nozzle to reach temperature
    M109 S160
    G28 Z ;home Z
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    Z_TILT_ADJUST
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ADAPTIVE=1
    M109 S{EXTRUDER}
    LINE_PURGE

[gcode_macro START_PRINT]
gcode:
    {% set BED = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER_TEMP|default(190)|float %}
    CLEAR_PAUSE
    M220 S100 # reset feedrate
    G21 # metric values
    G90 # absolute positioning
    M83  # extruder relative mode
    G28 X Y # home XY
    # Start bed heating
    M140 S{BED}
    # Wait for bed to reach temperature
    M190 S{BED}
    # Set and wait for nozzle to reach temperature
    M109 S160
    G28 Z ;home Z
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    Z_TILT_ADJUST
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ADAPTIVE=1
    M109 S{EXTRUDER}
    LINE_PURGE

[gcode_macro PRINT_END]
gcode:
  {% set park_x = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x|default(5)|float %}
  {% set park_y = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y|default(5)|float %}
  {% set park_dz = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_dz|default(5)|float %}
    M106 S0 # Turn-off fan
    M104 S0 # Turn-off hotend
    M140 S0 # Turn-off bed
    PARK_FILAMENT
    G1 Z{park_dz} # Raise Z more
    G90 # Absolute positionning
    G1 X{park_x} Y{park_y} F12000 # Wipe out
    {% if printer.toolhead.position.z < 150 %}
      G1 Z150 F3600
    {% endif %}
    G92 E0 # Reset Extruder
    M84 X Y E ;Disable all steppers but Z
    CLEAR_PAUSE  # Clear any pause state.

[gcode_macro END_PRINT]
gcode:   
  {% set park_x = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x|default(5)|float %}
  {% set park_y = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y|default(5)|float %}
  {% set park_dz = printer["gcode_macro _CLIENT_VARIABLE"].custom_park_dz|default(5)|float %}
    M106 S0 # Turn-off fan
    M104 S0 # Turn-off hotend
    M140 S0 # Turn-off bed
    PARK_FILAMENT
    G1 Z{park_dz} # Raise Z more
    G90 # Absolute positionning
    G1 X{park_x} Y{park_y} F12000 # Wipe out
    {% if printer.toolhead.position.z < 150 %}
      G1 Z150 F3600
    {% endif %}
    G92 E0 # Reset Extruder
    M84 X Y E # Disable all steppers but Z
    CLEAR_PAUSE  # Clear any pause state.

[gcode_macro LOAD_FILAMENT]
description: Load filament from toolhead
gcode:
  {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
  {% set current_target_temp  = printer.extruder.target|int %}
  {% set load_length = printer["gcode_macro _TOOLHEAD_VARIABLE"].total_toolhead_length|default(50)|abs %}
  {% set park_length = printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position|default(10)|abs %}
  {action_respond_info("Load filament length = %.1f" % (load_length|float))}
  {action_respond_info("Park filament length = %.1f" % (park_length|float))}
  {% if printer.print_stats.state != "printing" %}
    {% if printer.extruder.temperature <= 175 %}
      M104 S{extruder_temp}
      M117 Nozzle heating...
      {action_respond_info("Nozzle not hot enough!")}
      {action_respond_info("Nozzle heating...")}
      M109 S{extruder_temp}
    {% endif %}
    M117 Extruding...
    G91
    G92 E0
    G1 E{load_length} F300
    G1 E-{park_length} F720
    M400
    M117 Extrude Finish
    M400
    {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
      M104 S0
    {% endif %}
  {% else %}
    {action_respond_info("Don't load filament during printing!!!")}
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament from toolhead
gcode:
  {% set unload_length = printer["gcode_macro _TOOLHEAD_VARIABLE"].total_toolhead_length|default(50)|abs %}
  {action_respond_info("Unload filament length = %.1f" % (unload_length|float))}
  {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
  {% set current_target_temp  = printer.extruder.target|int %}

  {% if printer.print_stats.state != "printing" %}
    {% if printer.extruder.temperature <= 175 %}
      M104 S{extruder_temp}
      M117 Nozzle heating...
      {action_respond_info("Nozzle not hot enough!")}
      {action_respond_info("Nozzle heating...")}
      M109 S{extruder_temp}
    {% endif %}
    M117 Retracting...
    G91
    G92 E0
    G1 E5 F300
    G1 E-15 F1500
    G1 E16 F1000
    G1 E-20 F1200
    G1 E15 F1000
    G1 E-15 F1200
    G1 E15 F1000
    G1 E-15 F1200
    G1 E15 F1000
    G1 E-15 F1200
    G1 E15 F1000
    G1 E-15 F1200
    G4 P5000 ; wait 5 seconds
    G1 E-{unload_length-20} F720
    M400
    M117 Retract Finish
    M400
    {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
      M104 S0
    {% endif %}
  {% else %}
    {action_respond_info("Don't unload filament during printing!!!")}
  {% endif %}



[gcode_macro PURGE_FILAMENT]
description: Manually purge filament
gcode:
  {% set park_length = printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position|default(10)|abs %}
  {% set purge_length = params.length|default(50)|abs %}
  {action_respond_info("Purge filament length = %.1f" % (purge_length|float))}
  {action_respond_info("Park filament length = %.1f" % (park_length|float))}
    G91
    G92 E0
    G1 E{park_length} F720
    G1 E{purge_length} F300
    G1 E-{park_length} F1800

[gcode_macro PARK_FILAMENT]
description: park filament at cooling tube position in hotend
gcode:
  {% set park_length = printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position|default(10)|abs %}
  {action_respond_info("Park filament length = %.1f" % (park_length|float))}
    G91
    G92 E0
    G1 E-{park_length} F1800

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position|default(10)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer["gcode_macro RESUME"].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro RESUME"].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  #_CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  M221 S100  # Reset extrusion multiplier to 100%.
  CLEAR_PAUSE  # Clear any pause state.
  {% if printer.toolhead.position.z < 150 %}
    G1 Z150 F3600
  {% endif %}
  _CLIENT_EXTRUDE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer["gcode_macro SET_PRINT_STATS_INFO"].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer["gcode_macro SET_PRINT_STATS_INFO"].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"]|default({}) %}
  {% set length = params.LENGTH|default(printer["gcode_macro _HOTEND_VARIABLE"].cooling_tube_position)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}


[gcode_macro _global_var]
variable_bed_mesh_calibrate_target_temp: 65
variable_load_filament_extruder_temp: 250
gcode: